#include "token.h"
#include <cassert>

const char* GetTokenStr(TOKEN token) {
  switch (token) {
  case TOKEN::SPACE:
    return "space";
  case TOKEN::TAB:
    return "tab";
  case TOKEN::ENTER:
    return "enter";
  case TOKEN::LINEFEED:
    return "linefeed";
  case TOKEN::INT:
    return "int";
  case TOKEN::DOUBLE:
    return "double";
  case TOKEN::STRING:
    return "string";
  case TOKEN::BOOL:
    return "bool";
  case TOKEN::BYTE:
    return "byte";
  case TOKEN::VOID:
    return "void";
  case TOKEN::IF:
    return "if";
  case TOKEN::WHILE:
    return "while";
  case TOKEN::ELSE:
    return "else";
  case TOKEN::BREAK:
    return "break";
  case TOKEN::CONTINUE:
    return "continue";
  case TOKEN::RETURN:
    return "return";
  case TOKEN::LEFT_PARENTHESIS:
    return "(";
  case TOKEN::RIGHT_PARENTHESIS:
    return ")";
  case TOKEN::LEFT_BRACKETS:
    return "[";
  case TOKEN::RIGHT_BRACKETS:
    return "]";
  case TOKEN::LEFT_BRACE:
    return "{";
  case TOKEN::RIGHT_BRACE:
    return "}";
  case TOKEN::SEMICOLON:
    return ";";
  case TOKEN::COLON:
    return ":";
  case TOKEN::DECIMAL_POINT:
    return ".";
  case TOKEN::COMMA:
    return ",";
  case TOKEN::PLUS:
    return "+";
  case TOKEN::MINUS:
    return "-";
  case TOKEN::MULTIPLY:
    return "*";
  case TOKEN::DIVIDE:
    return "/";
  case TOKEN::AND:
    return "&";
  case TOKEN::OR:
    return "|";
  case TOKEN::NOT:
    return "~";
  case TOKEN::ASSIGN:
    return "=";
  case TOKEN::COMPARE:
    return "==";
  case TOKEN::GREATER_THAN:
    return ">";
  case TOKEN::LESS_THAN:
    return "<";
  case TOKEN::STRING_ITERAL:
    return "string_iteral";
  case TOKEN::TRUE:
    return "true";
  case TOKEN::FALSE:
    return "false";
  case TOKEN::INT_ITERAL:
    return "int_iteral";
  case TOKEN::DOUBLE_ITERAL:
    return "double_iteral";
  case TOKEN::BYTE_ITERAL:
    return "byte_iteral";
  case TOKEN::FUNC:
    return "func";
  case TOKEN::TYPE:
    return "type";
  case TOKEN::METHOD:
    return "method";
  case TOKEN::ID:
    return "id";
  case TOKEN::TEOF:
    return "teof";
  default:
    assert(token == TOKEN::INVALID);
    return "invalid";
  }
}
